import React, { useState, useCallback, useMemo, useRef } from 'react';
import { XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine, ReferenceArea, Brush, AreaChart, Area, Line, ComposedChart } from 'recharts';
import { Card } from './Card';
import { FiEye, FiEyeOff, FiUploadCloud, FiDownload } from "react-icons/fi";
import { Button } from './Button';
import CustomLabel from '../common/CustomLabel';
import { scaleLog } from 'd3-scale';
import './FFTCss.css';
import HarmonicsLabel from '../common/HarmonicsLabel';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './Tabs';

// Types
type Axis = 'x' | 'y' | 'z';
type VisibleAxes = Record<Axis, boolean>;
type Marker = {
  id: string;
  frequency: number;
  bandWidth: number;
  color: string;
  harmonics: number;
  subHarmonics: number;
  axis: Axis;
  name: string;
  visible: boolean;
};
type HarmonicMarker = Omit<Marker, 'harmonics' | 'subHarmonics'> & { parentId: string, order: number };
type DataPoint = {
  frequency: number;
  x: number;
  y: number;
  z: number;
};
type SteppedLineInput = {
  startFrequency: string;
  warningAmplitude: string;
  alertAmplitude: string;
};

// Constants
const AXIS_COLORS: Record<Axis, string> = {
  x: "#ffc6b7",
  y: "#fd8c73",
  z: "#e30613"
};
const ALERT_COLORS = {
  warning: "#FACC15",
  alert: "#E11D48"
};

// Helper functions
const generateColor = (index: number): string => {
  const hue = (index * 137.508) % 360;
  return `hsl(${hue}, 70%, 50%)`;
};

const generateId = (): string => Math.random().toString(36).substr(2, 9);

// Components
const QuantitySelector: React.FC<{
  value: number;
  min: number;
  max: number;
  onChange: (value: number) => void;
}> = React.memo(({ value, min, max, onChange }) => {
  const [disableDec, setDisableDec] = useState(value <= min);
  const [disableInc, setDisableInc] = useState(value >= max);

  const updateButtons = useCallback((newValue: number) => {
    setDisableDec(newValue <= min);
    setDisableInc(newValue >= max);
  }, [min, max]);

  const increment = useCallback(() => {
    if (value < max) {
      const newValue = value + 1;
      onChange(newValue);
      updateButtons(newValue);
    }
  }, [value, max, onChange, updateButtons]);

  const decrement = useCallback(() => {
    if (value > min) {
      const newValue = value - 1;
      onChange(newValue);
      updateButtons(newValue);
    }
  }, [value, min, onChange, updateButtons]);

  return (
    <span className="flex w-min items-center border border-gray-300 rounded-md overflow-hidden">
      <button
        className={`px-2 py-1 text-sm font-medium transition-colors duration-150 ${
          disableDec
            ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
            : 'bg-white text-gray-700 hover:bg-gray-100'
        }`}
        onClick={decrement}
        disabled={disableDec}
      >
        &minus;
      </button>
      <input
        className="w-10 text-center border-none hover:border-none active:border-none py-1 text-sm"
        type="text"
        value={value}
        readOnly
      />
      <button
        className={`px-2 py-1 text-sm font-medium transition-colors duration-150 ${
          disableInc
            ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
            : 'bg-white text-gray-700 hover:bg-gray-100'
        }`}
        onClick={increment}
        disabled={disableInc}
      >
        +
      </button>
    </span>
  );
});

const EnhancedFFTSpectralPlot: React.FC = () => {
  // State
  const [data, setData] = useState<DataPoint[]>([]);
  const [baseFrequency, setBaseFrequency] = useState(100);
  const [markers, setMarkers] = useState<Marker[]>([]);
  const [harmonicMarkers, setHarmonicMarkers] = useState<HarmonicMarker[]>([]);
  const [colorIndex, setColorIndex] = useState(0);
  const [visibleAxes, setVisibleAxes] = useState<VisibleAxes>({ x: true, y: true, z: true });
  const [markerName, setMarkerName] = useState('');
  const [brushDomain, setBrushDomain] = useState<[number, number] | null>(null);
  const [steppedLineData, setSteppedLineData] = useState<{ warning: DataPoint[], alert: DataPoint[] }>({ warning: [], alert: [] });
  const [steppedLineInputs, setSteppedLineInputs] = useState<SteppedLineInput[]>([{ startFrequency: '', warningAmplitude: '', alertAmplitude: '' }]);
  const [domainType, setDomainType] = useState<'native' | 'order'>('native');
  const [analysisName, setAnalysisName] = useState('');
  const [yAxisScale, setYAxisScale] = useState<'linear' | 'log'>('linear');

  const fileInputRef = useRef<HTMLInputElement>(null);

  // Memoized values
  const axisData = useMemo(() => {
    if (data.length === 0) return { xMin: 0, xMax: 0, yMin: 0, yMax: 0 };
    const xMin = 0;
    const xMax = data[data.length - 1].frequency;
    const yValues = data.flatMap(d => [d.x, d.y, d.z].filter(v => v !== undefined));
    const yMin = Math.min(...yValues) * 1.1;
    const yMax = Math.max(...yValues) * 1.5;
    return { xMin, xMax, yMin, yMax };
  }, [data]);

  const visibleData = useMemo(() => {
    if (!brushDomain) return data;
    return data.filter(d => d.frequency >= brushDomain[0] && d.frequency <= brushDomain[1]);
  }, [data, brushDomain]);

  const xDomain = useMemo(() => {
    if (brushDomain) return brushDomain;
    return [axisData.xMin, axisData.xMax];
  }, [axisData, brushDomain]);

  // Callbacks
  const toggleYAxisScale = useCallback(() => {
    setYAxisScale(prevScale => (prevScale === 'linear' ? 'log' : 'linear'));
  }, []);

  const handleSteppedLineInputChange = useCallback((index: number, field: keyof SteppedLineInput, value: string) => {
    setSteppedLineInputs(prev => {
      const newInputs = [...prev];
      newInputs[index][field] = value;
      return newInputs;
    });
  }, []);

  const addSteppedLineInput = useCallback(() => {
    setSteppedLineInputs(prev => [...prev, { startFrequency: '', warningAmplitude: '', alertAmplitude: '' }]);
  }, []);

  const generateSteppedLineData = useCallback(() => {
    const warningData: DataPoint[] = [];
    const alertData: DataPoint[] = [];

    steppedLineInputs.forEach((input, i) => {
      const start = Number(input.startFrequency);
      const warningAmplitude = Number(input.warningAmplitude);
      const alertAmplitude = Number(input.alertAmplitude);
      const end = i < steppedLineInputs.length - 1 ? Number(steppedLineInputs[i + 1].startFrequency) : start + 1;

      warningData.push({ frequency: start, x: warningAmplitude, y: warningAmplitude, z: warningAmplitude });
      warningData.push({ frequency: end, x: warningAmplitude, y: warningAmplitude, z: warningAmplitude });

      alertData.push({ frequency: start, x: alertAmplitude, y: alertAmplitude, z: alertAmplitude });
      alertData.push({ frequency: end, x: alertAmplitude, y: alertAmplitude, z: alertAmplitude });
    });

    warningData.sort((a, b) => a.frequency - b.frequency);
    alertData.sort((a, b) => a.frequency - b.frequency);

    setSteppedLineData({ warning: warningData, alert: alertData });
  }, [steppedLineInputs]);

  const handleChartClick = useCallback((event: any) => {
    if (!event || !event.activeLabel) return;

    const clickedFrequency = Math.round(Number(event.activeLabel));
    const activeDataKey = event.activeTooltipIndex !== undefined
      ? Object.keys(event.activePayload[0].payload).find(key => key !== 'frequency' && visibleAxes[key as Axis])
      : null;

    const newMarker: Marker = {
      id: generateId(),
      frequency: clickedFrequency,
      bandWidth: 20,
      color: generateColor(colorIndex),
      harmonics: 0,
      subHarmonics: 0,
      axis: activeDataKey as Axis,
      name: markerName || `Marker ${markers.length + 1}`,
      visible: true,
    };
    setMarkers(prev => [...prev, newMarker]);
    setColorIndex(prev => prev + 1);
    setMarkerName('');
  }, [colorIndex, visibleAxes, markers.length, markerName]);

  const updateHarmonicMarkers = useCallback((marker: Marker): HarmonicMarker[] => {
    const newHarmonicMarkers: HarmonicMarker[] = [];
    
    for (let i = 2; i <= marker.subHarmonics + 1; i++) {
      newHarmonicMarkers.push({
        id: generateId(),
        parentId: marker.id,
        frequency: Math.round(marker.frequency / i),
        bandWidth: marker.bandWidth,
        color: marker.color,
        axis: marker.axis,
        name: `${marker.name} (1/${i})`,
        visible: marker.visible,
        order: 1/i
      });
    }
    
    for (let i = 2; i <= marker.harmonics + 1; i++) {
      newHarmonicMarkers.push({
        id: generateId(),
        parentId: marker.id,
        frequency: Math.round(marker.frequency * i),
        bandWidth: marker.bandWidth,
        color: marker.color,
        axis: marker.axis,
        name: `${marker.name} (${i}x)`,
        visible: marker.visible,
        order: i
      });
    }
    
    return newHarmonicMarkers;
  }, []);

  const handleMarkerChange = useCallback((markerId: string, field: keyof Marker, value: any) => {
    setMarkers(prev => {
      const updatedMarkers = prev.map(marker => {
        if (marker.id !== markerId) return marker;
        const updatedMarker = { ...marker, [field]: field === 'frequency' ? Math.round(Number(value)) : value };
        return updatedMarker;
      });
      return updatedMarkers;
    });

    // Update harmonic markers
    setHarmonicMarkers(prev => {
      const updatedMarker = markers.find(m => m.id === markerId);
      if (!updatedMarker) return prev;
      
      const newHarmonicMarkers = updateHarmonicMarkers(updatedMarker);
      return [
        ...prev.filter(hm => hm.parentId !== markerId),
        ...newHarmonicMarkers
      ];
    });
  }, [markers, updateHarmonicMarkers]);

  const handleRemoveMarker = useCallback((markerId: string) => {
    setMarkers(prev => prev.filter(marker => marker.id !== markerId));
    setHarmonicMarkers(prev => prev.filter(hm => hm.parentId !== markerId));
  }, []);

  const toggleMarkerVisibility = useCallback((markerId: string) => {
    setMarkers(prev => prev.map(marker => 
      marker.id === markerId ? { ...marker, visible: !marker.visible } : marker
    ));
    setHarmonicMarkers(prev => prev.map(hm => 
      hm.parentId === markerId ? { ...hm, visible: !hm.visible } : hm
    ));
  }, []);

  const handleBrush = useCallback((brushArea: any) => {
    if (brushArea && brushArea.startIndex !== undefined && brushArea.endIndex !== undefined) {
      const startIndex = Math.max(0, Math.floor(brushArea.startIndex));
      const endIndex = Math.min(data.length - 1, Math.ceil(brushArea.endIndex));
      
      const startFreq = data[startIndex].frequency;
      const endFreq = data[endIndex].frequency;
      
      setBrushDomain([startFreq, endFreq]);
    } else {
      setBrushDomain(null);
    }
  }, [data]);

  const getYAxisProps = useCallback(() => {
    if (yAxisScale === 'log') {
      const yMin = Math.max(axisData.yMin, 0.0001);
      const yMax = axisData.yMax;
      return {
        scale: scaleLog().base(Math.E),
        domain: [yMin, yMax],
        tickFormatter: (value: number) => value.toExponential(2),
      };
    } else {
      return {
        domain: [axisData.yMin, axisData.yMax],
        tickFormatter: (value: number) => value.toFixed(2),
      };
    }
  }, [yAxisScale, axisData]);

  const getXAxisProps = useCallback(() => {
    const props = {
      dataKey: "frequency",
      type: "number" as const,
      domain: xDomain,
      tickFormatter: (value: number) => domainType === 'native' ? value : (value / baseFrequency).toFixed(1) + 'x',
    };
    return props;
  }, [domainType, xDomain, baseFrequency]);



    const customTooltip = useCallback(({ active, payload, label }: any) => {
        if (active && payload && payload.length) {
          const frequency = Number(label);
          const order = frequency / baseFrequency;
          return (
            <div className="bg-slate-900 p-5 text-slate-50 rounded-md shadow">
              <p className='font-bold text-amber-400 line-height-0'>
                Freq: {frequency.toFixed(0)} Hz
              </p>
              <p className='font-bold text-teal-400'>
                Order: x{order.toFixed(2)}
              </p>
              <hr className='my-1'></hr>
              {payload.map((entry: any, index: number) => (
                <p key={index}>{entry.name}: {entry.value ? entry.value.toFixed(2) : 'N/A'} mg</p>
              ))}
            </div>
          );
        }
        return null;
      }, [baseFrequency]);
    
      const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const content = e.target?.result as string;
            const lines = content.split('\n');
            const parsedData = lines
              .filter(line => line.trim() !== '')
              .map((line, index) => {
                const [x, y, z] = line.split(/\s+/).map(value => {
                  const num = Number(value);
                  return num === 0 ? 0.0001 : num;
                });
                return { frequency: index, x, y, z };
              });
            setData(parsedData);
          };
          reader.readAsText(file);
        }
      }, []);
    
      const handleUploadClick = useCallback(() => {
        fileInputRef.current?.click();
      }, []);
    
      const exportData = useCallback(() => {
        const exportData = {
          markers,
          thresholds: {
            warning: steppedLineData.warning,
            alert: steppedLineData.alert
          }
        };
    
        const jsonString = JSON.stringify(exportData, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
    
        const a = document.createElement('a');
        a.href = url;
        a.download = 'fft_analysis_data.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, [markers, steppedLineData]);
    
      const allMarkers = useMemo(() => [...markers, ...harmonicMarkers], [markers, harmonicMarkers]);
    
      const markerElements = useMemo(() => allMarkers.flatMap((marker) => {
        if (!marker.visible) return [];
    
        return [
          <ReferenceLine
            key={`line-${marker.id}`}
            x={marker.frequency}
            stroke={marker.color}
            label={<CustomLabel value={marker.name} />}
            strokeDasharray="7 3"
            strokeOpacity={0.75}
          />,
          <ReferenceArea
            key={`area-${marker.id}`}
            x1={marker.frequency - marker.bandWidth / 2}
            x2={marker.frequency + marker.bandWidth / 2}
            y1={axisData.yMin}
            y2={axisData.yMax / 1.4}
            fill={marker.color}
            fillOpacity={0.2}
            strokeOpacity={0.3}
          />
        ];
      }), [allMarkers, axisData]);
    
      const toggleAxisVisibility = useCallback((axis: Axis) => {
        setVisibleAxes(prev => ({ ...prev, [axis]: !prev[axis] }));
      }, []);
    
      return (
        <Card className="w-full mx-auto">
          <div className='flex justify-between items-center mb-7'>
            <h2 className='font-bold text-lg ml-3'>Advanced Spectral Analysis {analysisName && `: ${analysisName}`}</h2>
    
            <div className="inline-flex rounded-md shadow-sm">
              <div className="inline-flex rounded-md shadow-sm" role="group">
                <button
                  type="button"
                  onClick={() => setDomainType('native')}
                  className={`px-4 py-2 text-sm font-medium border ${domainType === 'native'
                    ? 'bg-slate-50 text-slate-900 border-slate-200 hover:bg-slate-100 hover:text-slate-1000'
                    : 'bg-white text-slate-300 border-gray-200 hover:bg-gray-50 hover:text-gray-600'
                    } rounded-l-lg`}
                >
                  Frequency
                </button>
                <button
                  type="button"
                  onClick={() => setDomainType('order')}
                  className={`px-4 py-2 text-sm font-medium border ${domainType === 'order'
                    ? 'bg-slate-50 text-slate-900 border-slate-200 hover:bg-slate-100 hover:text-slate-1000'
                    : 'bg-white text-slate-300 border-gray-200 hover:bg-gray-50 hover:text-gray-600'
                    } rounded-r-lg`}
                >
                  Order
                </button>
              </div>
    
              <div className='flex gap-5 ml-7'>
                <div className="inline-flex rounded-md shadow-sm" role="group">
                  {(['x', 'y', 'z'] as Axis[]).map((axis) => (
                    <button
                      key={axis}
                      type="button"
                      onClick={() => toggleAxisVisibility(axis)}
                      className={`px-4 py-2 text-sm font-medium border ${visibleAxes[axis]
                        ? 'bg-slate-50 text-slate-900 border-slate-200 hover:bg-slate-100 hover:text-slate-1000'
                        : 'bg-white text-slate-300 border-gray-200 hover:bg-gray-50 hover:text-gray-600'
                        } ${axis === 'x' ? 'rounded-l-lg' : axis === 'z' ? 'rounded-r-lg' : ''}`}
                    >
                      {axis.toUpperCase()}-Axis
                    </button>
                  ))}
                </div>
              </div>
              <div className='divide-x-2 ml-7 mr-4'>
                <Button className='w-[60px]' variant='light' onClick={toggleYAxisScale}>
                  {yAxisScale === 'log' ? 'Linear' : 'Log'}
                </Button>
              </div>
              <Button variant='light' onClick={handleUploadClick}>
                <p className='flex items-center gap-2'><FiUploadCloud />Upload File</p>
              </Button>
              <Button variant='light' onClick={exportData}>
                <p className='flex items-center gap-2'><FiDownload />Export Data</p>
              </Button>
            </div>
          </div>
    
          <div style={{ height: '100%', display: 'flex', flexDirection: 'column', marginBottom: '20px' }}>
            <ResponsiveContainer width="100%" height="100%" minHeight={300} className="my-custom-chart">
              <ComposedChart
                data={visibleData}
                margin={{ top: 0, right: 0, left: -10, bottom: 0 }}
                onClick={handleChartClick}
              >
                <CartesianGrid vertical={false} horizontal={true} />
                <XAxis {...getXAxisProps()} />
                <YAxis {...getYAxisProps()} />
                <Tooltip content={customTooltip} cursor={{ strokeDasharray: '3 3' }} />
                {markerElements}
                {(['x', 'y', 'z'] as Axis[]).map((axis) => (
                  <Area
                    key={axis}
                    type="linear"
                    dataKey={axis}
                    fill={`${AXIS_COLORS[axis]}33`}
                    stroke={AXIS_COLORS[axis]}
                    strokeWidth={2}
                    dot={null}
                    name={`${axis.toUpperCase()}-Axis`}
                    isAnimationActive={false}
                    legendType="circle"
                    hide={!visibleAxes[axis]}
                  />
                ))}
                {steppedLineData.warning.length > 0 && (
                  <Line
                    type="stepAfter"
                    data={steppedLineData.warning}
                    dataKey="x"
                    stroke={ALERT_COLORS.warning}
                    strokeWidth={1}
                    dot={false}
                    name="Warning Line"
                    isAnimationActive={false}
                  />
                )}
                {steppedLineData.alert.length > 0 && (
                  <Line
                    type="stepAfter"
                    data={steppedLineData.alert}
                    dataKey="x"
                    stroke={ALERT_COLORS.alert}
                    strokeWidth={1}
                    dot={false}
                    name="Alert Line"
                    isAnimationActive={false}
                  />
                )}
              </ComposedChart>
            </ResponsiveContainer>
            
            <ComposedChart
              data={data}
              height={40}
              margin={{ top: 0, right: 0, left: -10, bottom: 0 }}
            >
              <XAxis 
                {...getXAxisProps()}
                height={0}
                tick={false}
                tickLine={false}
                axisLine={false}
              />
              <YAxis hide domain={[axisData.yMin, axisData.yMax]} />
              <Brush
                dataKey="frequency"
                height={40}
                stroke="#8884d8"
                onChange={handleBrush}
                startIndex={brushDomain ? data.findIndex(d => d.frequency >= brushDomain[0]) : undefined}
                endIndex={brushDomain ? data.findIndex(d => d.frequency > brushDomain[1]) - 1 : undefined}
              />
              {(['x', 'y', 'z'] as Axis[]).map((axis) => (
                <Area
                  key={axis}
                  type="linear"
                  dataKey={axis}
                  fill={`${AXIS_COLORS[axis]}00`}
                  stroke={AXIS_COLORS[axis]}
                  strokeWidth={1}
                  dot={null}
                  name={`${axis.toUpperCase()}-Axis`}
                  isAnimationActive={false}
                  hide={!visibleAxes[axis]}
                />
              ))}
            </ComposedChart>
          </div>
    
          <Card>
            <Tabs defaultValue="tab1">
              <div className='flex item-center justify-between'>
                <div>
                  <TabsList variant="line">
                    <TabsTrigger className='text-base' value="tab1">Add Frequency Markers</TabsTrigger>
                    <TabsTrigger className='text-base' value="tab2">Add Thresholds</TabsTrigger>
                  </TabsList>
                </div>
    
                <div className='flex justify-between items-center'>
                  <div className="mb-4 flex space-x-4 items-center">
                    <div className="relative">
                      <input
                        type="number"
                        id="base-frequency"
                        value={baseFrequency}
                        onChange={(e) => setBaseFrequency(Math.round(Number(e.target.value)))}
                        className="block w-[115px] px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                        placeholder=" "
                      />
                      <label htmlFor="base-frequency" className="absolute text-sm text-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 left-1">Base Freq (Hz)</label>
                    </div>
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={handleFileUpload}
                      style={{ display: 'none' }}
                      accept=".csv,.txt"
                    />
                    <div className="relative">
                      <input
                        type="text"
                        id="analysis-name"
                        maxLength={36}
                        value={analysisName}
                        onChange={(e) => setAnalysisName(e.target.value)}
                        className="block w-[320px] px-2.5 pb-2.5 pt-4 w-full text-sm text-gray-900 bg-transparent rounded-lg border-1 border-gray-300 appearance-none focus:outline-none focus:ring-0 focus:border-blue-600 peer"
                        placeholder=" "
                      />
                      <label htmlFor="analysis-name" className="absolute text-sm text-gray-500 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 left-1">Analysis Name</label>
                    </div>
                  </div>
                </div>
              </div>
    
              <div>
                <TabsContent
                  value="tab1"
                  className="space-y-2 text-sm leading-7 text-gray-600 dark:text-gray-500"
                >
                  <div>
                    <div className="overflow-y-auto mt-2">
                      <table className="w-full border-collapse">
                        <thead className='w-full'>
                          <tr className='bg-slate-50 rounded-md'>
                            <th className="text-left p-2 pl-8 w-[200px]">Name</th>
                            <th className="text-left p-2 w-[60px]">Order</th>
                            <th className="text-left p-2 w-[140px]">Marker Name</th>
                            <th className="text-left p-2 w-[120px]">Freq (Hz)</th>
                            <th className="text-left p-2 w-[140px]">Band Size (Hz)</th>
                            <th className="text-left p-2 w-[100px]">Harmonics</th>
                            <th className="text-left p-2 w-[130px]">Sub-Harmonics</th>
                            <th className="text-left p-2 w-[120px]">Axis</th>

                            <th className='w-[24px]'></th>
                        <th className="text-left p-2 border-spacing-5 w-[140px]">Actions</th>
                      </tr>
                    </thead>
                    <tbody className='mr-5'>
                      {markers.map((marker) => (
                        <tr key={marker.id}>
                          <td className="p-2">
                            <span style={{ borderLeftWidth: '4px', borderLeftColor: marker.color, opacity: 0.9 }} className='text-base pl-5 font-bold'>{marker.name}</span>
                          </td>
                          <td className="p-2">
                            <span className='text-base text-center font-medium'>{(marker.frequency / baseFrequency).toFixed(2)}x</span>
                          </td>
                          <td className="p-2">
                            <input
                              type="text"
                              value={marker.name}
                              maxLength={20}
                              onChange={(e) => handleMarkerChange(marker.id, 'name', e.target.value)}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Marker Name"
                            />
                          </td>
                          <td className="p-2">
                            <input
                              type="number"
                              value={marker.frequency}
                              onChange={(e) => handleMarkerChange(marker.id, 'frequency', Math.round(Number(e.target.value)))}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Frequency"
                            />
                          </td>
                          <td className="p-2">
                            <input
                              type="number"
                              value={marker.bandWidth}
                              onChange={(e) => {
                                const value = Math.max(0, Number(e.target.value));
                                handleMarkerChange(marker.id, 'bandWidth', value);
                              }}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Band Size"
                            />
                          </td>
                          <td className="p-2">
                            <QuantitySelector
                              value={marker.harmonics}
                              min={0}
                              max={20}
                              onChange={(value) => handleMarkerChange(marker.id, 'harmonics', value)}
                            />
                          </td>
                          <td className="p-2">
                            <QuantitySelector
                              value={marker.subHarmonics}
                              min={0}
                              max={10}
                              onChange={(value) => handleMarkerChange(marker.id, 'subHarmonics', value)}
                            />
                          </td>
                          <td className="p-2">
                            <select
                              value={marker.axis}
                              onChange={(e) => handleMarkerChange(marker.id, 'axis', e.target.value as Axis)}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                            >
                              <option value="x">X-Axis</option>
                              <option value="y">Y-Axis</option>
                              <option value="z">Z-Axis</option>
                            </select>
                          </td>
                          <td></td>
                          <td className="p-2">
                            <div className='flex gap-5'>
                              <Button
                                variant='ghost'
                                onClick={() => toggleMarkerVisibility(marker.id)}
                                className={`w-[80px] flex items-center justify-center gap-1 ${marker.visible ? '' : 'bg-green-100 text-green-700'}`}
                              >
                                {marker.visible ? (
                                  <>
                                    <FiEyeOff />
                                    <span>Hide</span>
                                  </>
                                ) : (
                                  <>
                                    <FiEye />
                                    <span>Show</span>
                                  </>
                                )}
                              </Button>
                              <Button variant="destructive" onClick={() => handleRemoveMarker(marker.id)} className="">Remove</Button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </TabsContent>
            <TabsContent
              value="tab2"
              className="space-y-2 text-sm leading-7 text-gray-600 dark:text-gray-500"
            >
              <div>
                <div className="overflow-y-auto mt-2">
                  <table className="w-full border-collapse">
                    <thead className='w-full'>
                      <tr className='bg-slate-50 rounded-md'>
                        <th className="text-left p-2 pl-8 w-[200px]">Start Frequency</th>
                        <th className="text-left p-2 w-[200px]">Warning Amplitude</th>
                        <th className="text-left p-2 w-[200px]">Alert Amplitude</th>
                        <th className="text-left p-2 w-[100px]">Actions</th>
                      </tr>
                    </thead>
                    <tbody className='mr-5'>
                      {steppedLineInputs.map((input, index) => (
                        <tr key={index}>
                          <td className="p-2">
                            <input
                              type="number"
                              value={input.startFrequency}
                              onChange={(e) => handleSteppedLineInputChange(index, 'startFrequency', e.target.value)}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Start Frequency"
                            />
                          </td>
                          <td className="p-2">
                            <input
                              type="number"
                              value={input.warningAmplitude}
                              onChange={(e) => handleSteppedLineInputChange(index, 'warningAmplitude', e.target.value)}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Warning Amplitude"
                            />
                          </td>
                          <td className="p-2">
                            <input
                              type="number"
                              value={input.alertAmplitude}
                              onChange={(e) => handleSteppedLineInputChange(index, 'alertAmplitude', e.target.value)}
                              className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                              placeholder="Alert Amplitude"
                            />
                          </td>
                          <td className="p-2">
                            <Button variant="destructive" onClick={() => {
                              const newInputs = steppedLineInputs.filter((_, i) => i !== index);
                              setSteppedLineInputs(newInputs);
                            }}>Remove</Button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <Button variant="light" onClick={addSteppedLineInput}>Add Row</Button>
                  <Button variant="primary" onClick={generateSteppedLineData}>Generate Stepped Line</Button>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
      </Card>
    </Card>
  );
};

export default EnhancedFFTSpectralPlot;